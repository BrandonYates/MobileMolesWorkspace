import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;


public class fingerFinder {
	
	private int height;
	private int width;
	private int picsize;
	
	public int numFingers(BufferedImage edges){
		
		width = edges.getWidth();
		height = edges.getHeight();
		picsize = width * height;
		
		
		int[] pixels = (int[]) edges.getData().getDataElements(0, 0, width, height, null);
		System.out.printf("picsize = %d\n", picsize);
		
		for(int j = 0; j < width; j++)
		{
			for(int k = 0; k < height; k++)
			{
				int index = j + k;
				if(pixels[index] == -1)
				{
					int edgeLen = connectedness(pixels, index);
				}
			}
		}
		for (int i = 0; i < picsize; i++) {
			//System.out.printf("%d\n", i);
			if(i!= picsize -1)
			{
				if(pixels[i] != pixels[i+1])
				{
					System.out.printf("pixels[%d] = %d\n", i, pixels[i]);
					System.out.printf("pixels[%d] = %d\n", i+1, pixels[i+1]);
					break;
				}
			}
		}
		return 0;
	}
	
	public int connectedness(int [] pixels, int i){
		
		
		int numConnected = 0;
		if(pixels[i-width] == pixels[i])
		{
			numConnected++;
		}
		if(pixels[i] == pixels[i+1])
		{
			numConnected++;
		}
		
		return 0;
	}
	//pathLen recursively finds the straight line distance of the paths leading away from a beginning pixel and returns the largest path
	public int pathLen(int []pixels, int index, char direction)
	{
		int indexN = index - width;
		int indexS = index + width;
		int indexW = index - 1;
		int indexE = index + 1;
		int indexNW = indexN - 1;
		int indexNE = indexN + 1;
		int indexSW = indexS - 1;
		int indexSE = indexS + 1;
		if(direction == 'N')
		{
			//base case index is < width meaning we have hit the top of the image
			if(index < width)
			{
				return 0;
			}
			else if(pixels[index] == pixels[indexN])
			{
				return pathLen(pixels, indexN,'N') + 1;
			}
		}
		else if(direction == 'S')
		{
			//base case index is > picsize - width meaning we have hit the bottom of the image
			if(index < (picsize - width))
			{
				return 0;
			}
			else if(pixels[index] == pixels[indexS])
			{
				return pathLen(pixels, indexS,'S') + 1;
			}
		}
		else if(direction == 'W')
		{
			
		}
		else if(direction =='E')
		{
			
		}
	}

}

